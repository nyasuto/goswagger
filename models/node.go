// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Node a Phisical Node
//
// node info
// swagger:model Node
type Node struct {

	// id
	ID int64 `json:"id,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// pet status in the store
	// Enum: [available pending sold]
	Status string `json:"status,omitempty"`
}

// Validate validates this node
func (m *Node) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Node) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var nodeTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["available","pending","sold"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nodeTypeStatusPropEnum = append(nodeTypeStatusPropEnum, v)
	}
}

const (

	// NodeStatusAvailable captures enum value "available"
	NodeStatusAvailable string = "available"

	// NodeStatusPending captures enum value "pending"
	NodeStatusPending string = "pending"

	// NodeStatusSold captures enum value "sold"
	NodeStatusSold string = "sold"
)

// prop value enum
func (m *Node) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nodeTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Node) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Node) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Node) UnmarshalBinary(b []byte) error {
	var res Node
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
